{"ast":null,"code":"import batch from '../batch';\nvar batchType = batch.getType();\nexport function actionTransformer(action) {\n  if (action && action.type === batchType) {\n    action.payload.type = batchType;\n    return action.payload;\n  }\n  return action;\n}\nexport var logger = {};\nvar _loop = function _loop(level) {\n  if (typeof console[level] === 'function') {\n    logger[level] = function levelFn() {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      var lastArg = args.pop();\n      if (Array.isArray(lastArg) && lastArg.type === batchType) {\n        lastArg.forEach(function (action) {\n          console[level].apply(console, [].concat(args, [action]));\n        });\n      } else {\n        args.push(lastArg);\n        console[level].apply(console, args);\n      }\n    };\n  }\n};\nfor (var level in console) {\n  _loop(level);\n}","map":{"version":3,"names":["batch","batchType","getType","actionTransformer","action","type","payload","logger","_loop","level","console","levelFn","_len","arguments","length","args","Array","_key","lastArg","pop","isArray","forEach","apply","concat","push"],"sources":["/Users/thanaphong.s/Desktop/React/Pcha-training/example_for_training/node_modules/redux-act/esm/loggers/reduxLogger.js"],"sourcesContent":["import batch from '../batch';\nvar batchType = batch.getType();\nexport function actionTransformer(action) {\n  if (action && action.type === batchType) {\n    action.payload.type = batchType;\n    return action.payload;\n  }\n\n  return action;\n}\nexport var logger = {};\n\nvar _loop = function _loop(level) {\n  if (typeof console[level] === 'function') {\n    logger[level] = function levelFn() {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      var lastArg = args.pop();\n\n      if (Array.isArray(lastArg) && lastArg.type === batchType) {\n        lastArg.forEach(function (action) {\n          console[level].apply(console, [].concat(args, [action]));\n        });\n      } else {\n        args.push(lastArg);\n        console[level].apply(console, args);\n      }\n    };\n  }\n};\n\nfor (var level in console) {\n  _loop(level);\n}"],"mappings":"AAAA,OAAOA,KAAK,MAAM,UAAU;AAC5B,IAAIC,SAAS,GAAGD,KAAK,CAACE,OAAO,CAAC,CAAC;AAC/B,OAAO,SAASC,iBAAiBA,CAACC,MAAM,EAAE;EACxC,IAAIA,MAAM,IAAIA,MAAM,CAACC,IAAI,KAAKJ,SAAS,EAAE;IACvCG,MAAM,CAACE,OAAO,CAACD,IAAI,GAAGJ,SAAS;IAC/B,OAAOG,MAAM,CAACE,OAAO;EACvB;EAEA,OAAOF,MAAM;AACf;AACA,OAAO,IAAIG,MAAM,GAAG,CAAC,CAAC;AAEtB,IAAIC,KAAK,GAAG,SAASA,KAAKA,CAACC,KAAK,EAAE;EAChC,IAAI,OAAOC,OAAO,CAACD,KAAK,CAAC,KAAK,UAAU,EAAE;IACxCF,MAAM,CAACE,KAAK,CAAC,GAAG,SAASE,OAAOA,CAAA,EAAG;MACjC,KAAK,IAAIC,IAAI,GAAGC,SAAS,CAACC,MAAM,EAAEC,IAAI,GAAG,IAAIC,KAAK,CAACJ,IAAI,CAAC,EAAEK,IAAI,GAAG,CAAC,EAAEA,IAAI,GAAGL,IAAI,EAAEK,IAAI,EAAE,EAAE;QACvFF,IAAI,CAACE,IAAI,CAAC,GAAGJ,SAAS,CAACI,IAAI,CAAC;MAC9B;MAEA,IAAIC,OAAO,GAAGH,IAAI,CAACI,GAAG,CAAC,CAAC;MAExB,IAAIH,KAAK,CAACI,OAAO,CAACF,OAAO,CAAC,IAAIA,OAAO,CAACb,IAAI,KAAKJ,SAAS,EAAE;QACxDiB,OAAO,CAACG,OAAO,CAAC,UAAUjB,MAAM,EAAE;UAChCM,OAAO,CAACD,KAAK,CAAC,CAACa,KAAK,CAACZ,OAAO,EAAE,EAAE,CAACa,MAAM,CAACR,IAAI,EAAE,CAACX,MAAM,CAAC,CAAC,CAAC;QAC1D,CAAC,CAAC;MACJ,CAAC,MAAM;QACLW,IAAI,CAACS,IAAI,CAACN,OAAO,CAAC;QAClBR,OAAO,CAACD,KAAK,CAAC,CAACa,KAAK,CAACZ,OAAO,EAAEK,IAAI,CAAC;MACrC;IACF,CAAC;EACH;AACF,CAAC;AAED,KAAK,IAAIN,KAAK,IAAIC,OAAO,EAAE;EACzBF,KAAK,CAACC,KAAK,CAAC;AACd"},"metadata":{},"sourceType":"module","externalDependencies":[]}